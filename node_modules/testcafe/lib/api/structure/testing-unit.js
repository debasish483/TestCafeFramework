"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_page_url_1 = require("../test-page-url");
const handle_tag_args_1 = __importDefault(require("../../utils/handle-tag-args"));
const delegated_api_1 = require("../../utils/delegated-api");
const type_assertions_1 = require("../../errors/runtime/type-assertions");
const flag_list_1 = __importDefault(require("../../utils/flag-list"));
const option_names_1 = __importDefault(require("../../configuration/option-names"));
class TestingUnit {
    constructor(testFile, unitTypeName) {
        this.testFile = testFile;
        this.unitTypeName = unitTypeName;
        this.name = null;
        this.pageUrl = null;
        this.authCredentials = null;
        this.meta = {};
        this.only = false;
        this.skip = false;
        this.requestHooks = [];
        this.clientScripts = [];
        this.disablePageReloads = void 0;
        this.apiMethodWasCalled = new flag_list_1.default([option_names_1.default.clientScripts, option_names_1.default.requestHooks]);
        const unit = this;
        this.apiOrigin = function apiOrigin(...args) {
            return unit._add(...args);
        };
        delegated_api_1.delegateAPI(this.apiOrigin, this.constructor.API_LIST, { handler: this });
    }
    _add() {
        throw new Error('Not implemented');
    }
    _only$getter() {
        this.only = true;
        return this.apiOrigin;
    }
    _skip$getter() {
        this.skip = true;
        return this.apiOrigin;
    }
    _disablePageReloads$getter() {
        this.disablePageReloads = true;
        return this.apiOrigin;
    }
    _enablePageReloads$getter() {
        this.disablePageReloads = false;
        return this.apiOrigin;
    }
    _page$(url, ...rest) {
        this.pageUrl = handle_tag_args_1.default(url, rest);
        type_assertions_1.assertType(type_assertions_1.is.string, 'page', 'The page URL', this.pageUrl);
        test_page_url_1.assertUrl(this.pageUrl, 'page');
        this.pageUrl = test_page_url_1.resolvePageUrl(this.pageUrl, this.testFile.filename);
        return this.apiOrigin;
    }
    _httpAuth$(credentials) {
        type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'httpAuth', 'credentials', credentials);
        type_assertions_1.assertType(type_assertions_1.is.string, 'httpAuth', 'credentials.username', credentials.username);
        type_assertions_1.assertType(type_assertions_1.is.string, 'httpAuth', 'credentials.password', credentials.password);
        if (credentials.domain)
            type_assertions_1.assertType(type_assertions_1.is.string, 'httpAuth', 'credentials.domain', credentials.domain);
        if (credentials.workstation)
            type_assertions_1.assertType(type_assertions_1.is.string, 'httpAuth', 'credentials.workstation', credentials.workstation);
        this.authCredentials = credentials;
        return this.apiOrigin;
    }
    _meta$(...args) {
        type_assertions_1.assertType([type_assertions_1.is.string, type_assertions_1.is.nonNullObject], 'meta', `${this.unitTypeName}.meta`, args[0]);
        const data = typeof args[0] === 'string' ? { [args[0]]: args[1] } : args[0];
        Object.keys(data).forEach(key => {
            this.meta[key] = data[key];
        });
        return this.apiOrigin;
    }
    static _makeAPIListForChildClass(ChildClass) {
        ChildClass.API_LIST = TestingUnit.API_LIST.concat(delegated_api_1.getDelegatedAPIList(ChildClass.prototype));
    }
}
exports.default = TestingUnit;
TestingUnit.API_LIST = delegated_api_1.getDelegatedAPIList(TestingUnit.prototype);
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,