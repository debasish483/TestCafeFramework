"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const client_script_1 = __importDefault(require("./client-script"));
function getDuplicatedScripts(collection, predicate) {
    return lodash_1.chain(collection)
        .groupBy(predicate)
        .pickBy(g => g.length > 1)
        .values()
        .map(value => {
        return value[0];
    })
        .value();
}
function setUniqueUrls(collection) {
    const scriptsWithDuplicatedUrls = getDuplicatedScripts(collection, i => i.url);
    for (let i = 0; i < scriptsWithDuplicatedUrls.length; i++)
        scriptsWithDuplicatedUrls[i].url = scriptsWithDuplicatedUrls[i].url + '-' + testcafe_hammerhead_1.generateUniqueId(client_script_1.default.URL_UNIQUE_PART_LENGTH);
    return collection;
}
exports.setUniqueUrls = setUniqueUrls;
function findProblematicScripts(collection) {
    const nonEmptyScripts = collection.filter(s => !!s.content);
    const scriptsWithDuplicatedContent = getDuplicatedScripts(nonEmptyScripts, s => s.content);
    const emptyScripts = collection.filter(s => !s.content);
    return {
        duplicatedContent: scriptsWithDuplicatedContent,
        empty: emptyScripts
    };
}
exports.findProblematicScripts = findProblematicScripts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3VzdG9tLWNsaWVudC1zY3JpcHRzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQStCO0FBQy9CLDZEQUF1RDtBQUN2RCxvRUFBMkM7QUFFM0MsU0FBUyxvQkFBb0IsQ0FBRSxVQUFVLEVBQUUsU0FBUztJQUNoRCxPQUFPLGNBQUssQ0FBQyxVQUFVLENBQUM7U0FDbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQztTQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUN6QixNQUFNLEVBQUU7U0FDUixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDVCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDLENBQUM7U0FDRCxLQUFLLEVBQUUsQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBZ0IsYUFBYSxDQUFFLFVBQVU7SUFDckMsTUFBTSx5QkFBeUIsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFL0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7UUFDckQseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsc0NBQWdCLENBQUMsdUJBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRXRJLE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFQRCxzQ0FPQztBQUVELFNBQWdCLHNCQUFzQixDQUFFLFVBQVU7SUFDOUMsTUFBTSxlQUFlLEdBQWdCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sNEJBQTRCLEdBQUcsb0JBQW9CLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNGLE1BQU0sWUFBWSxHQUFtQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEUsT0FBTztRQUNILGlCQUFpQixFQUFFLDRCQUE0QjtRQUMvQyxLQUFLLEVBQWMsWUFBWTtLQUNsQyxDQUFDO0FBQ04sQ0FBQztBQVRELHdEQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hhaW4gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJZCB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IENsaWVudFNjcmlwdCBmcm9tICcuL2NsaWVudC1zY3JpcHQnO1xuXG5mdW5jdGlvbiBnZXREdXBsaWNhdGVkU2NyaXB0cyAoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGNoYWluKGNvbGxlY3Rpb24pXG4gICAgICAgIC5ncm91cEJ5KHByZWRpY2F0ZSlcbiAgICAgICAgLnBpY2tCeShnID0+IGcubGVuZ3RoID4gMSlcbiAgICAgICAgLnZhbHVlcygpXG4gICAgICAgIC5tYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlWzBdO1xuICAgICAgICB9KVxuICAgICAgICAudmFsdWUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFVuaXF1ZVVybHMgKGNvbGxlY3Rpb24pIHtcbiAgICBjb25zdCBzY3JpcHRzV2l0aER1cGxpY2F0ZWRVcmxzID0gZ2V0RHVwbGljYXRlZFNjcmlwdHMoY29sbGVjdGlvbiwgaSA9PiBpLnVybCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdHNXaXRoRHVwbGljYXRlZFVybHMubGVuZ3RoOyBpKyspXG4gICAgICAgIHNjcmlwdHNXaXRoRHVwbGljYXRlZFVybHNbaV0udXJsID0gc2NyaXB0c1dpdGhEdXBsaWNhdGVkVXJsc1tpXS51cmwgKyAnLScgKyBnZW5lcmF0ZVVuaXF1ZUlkKENsaWVudFNjcmlwdC5VUkxfVU5JUVVFX1BBUlRfTEVOR1RIKTtcblxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFByb2JsZW1hdGljU2NyaXB0cyAoY29sbGVjdGlvbikge1xuICAgIGNvbnN0IG5vbkVtcHR5U2NyaXB0cyAgICAgICAgICAgICAgPSBjb2xsZWN0aW9uLmZpbHRlcihzID0+ICEhcy5jb250ZW50KTtcbiAgICBjb25zdCBzY3JpcHRzV2l0aER1cGxpY2F0ZWRDb250ZW50ID0gZ2V0RHVwbGljYXRlZFNjcmlwdHMobm9uRW1wdHlTY3JpcHRzLCBzID0+IHMuY29udGVudCk7XG4gICAgY29uc3QgZW1wdHlTY3JpcHRzICAgICAgICAgICAgICAgICA9IGNvbGxlY3Rpb24uZmlsdGVyKHMgPT4gIXMuY29udGVudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkdXBsaWNhdGVkQ29udGVudDogc2NyaXB0c1dpdGhEdXBsaWNhdGVkQ29udGVudCxcbiAgICAgICAgZW1wdHk6ICAgICAgICAgICAgIGVtcHR5U2NyaXB0c1xuICAgIH07XG59XG4iXX0=