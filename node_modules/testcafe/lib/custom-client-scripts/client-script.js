"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const promisified_functions_1 = require("../utils/promisified-functions");
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const path_1 = require("path");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const BEAUTIFY_REGEXP = /[/.:\s\\]/g;
const BEAUTIFY_CHAR = '_';
const EMPTY_CONTENT_STR = '{ content: <empty> }';
const CONTENT_STR_MAX_LENGTH = 30;
const CONTENT_ELLIPSIS_STR = '...';
const URL_UNIQUE_PART_LENGTH = 7;
class ClientScript {
    constructor(init, basePath) {
        this.init = init || null;
        this.url = testcafe_hammerhead_1.generateUniqueId(URL_UNIQUE_PART_LENGTH);
        this.content = '';
        this.path = null;
        this.module = null;
        this.page = testcafe_hammerhead_1.RequestFilterRule.ANY;
        this.basePath = basePath;
    }
    _resolvePath(path) {
        let resolvedPath = null;
        if (path_1.isAbsolute(path))
            resolvedPath = path;
        else {
            if (!this.basePath)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.clientScriptBasePathIsNotSpecified);
            resolvedPath = path_1.join(this.basePath, path);
        }
        return resolvedPath;
    }
    async _loadFromPath(path) {
        const resolvedPath = this._resolvePath(path);
        try {
            this.path = resolvedPath;
            this.content = await promisified_functions_1.readFile(this.path);
            this.content = this.content.toString();
            this.url = path || this.url;
        }
        catch (e) {
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotLoadClientScriptFromPath, path);
        }
    }
    async _loadFromModule(name) {
        let resolvedPath = null;
        try {
            resolvedPath = require.resolve(name);
        }
        catch (e) {
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.clientScriptModuleEntryPointPathCalculationError, e.message);
        }
        await this._loadFromPath(resolvedPath);
        this.module = name;
    }
    _prepareUrl() {
        this.url = this.url.replace(BEAUTIFY_REGEXP, BEAUTIFY_CHAR).toLowerCase();
    }
    async load() {
        if (this.init === null)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.clientScriptInitializerIsNotSpecified);
        else if (typeof this.init === 'string')
            await this._loadFromPath(this.init);
        else {
            const { path: initPath, content: initContent, module: initModule, page: initPage } = this.init;
            if (initPath && initContent || initPath && initModule || initContent && initModule)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.clientScriptInitializerMultipleContentSources);
            if (initPath)
                await this._loadFromPath(initPath);
            else if (initModule)
                await this._loadFromModule(initModule);
            else
                this.content = initContent;
            if (initPage)
                this.page = new testcafe_hammerhead_1.RequestFilterRule(initPage);
        }
        this._prepareUrl();
    }
    _contentToString() {
        let displayContent = '';
        if (this.content.length <= CONTENT_STR_MAX_LENGTH - CONTENT_ELLIPSIS_STR.length)
            displayContent = this.content;
        else
            displayContent = this.content.substring(0, CONTENT_STR_MAX_LENGTH - CONTENT_ELLIPSIS_STR.length) + CONTENT_ELLIPSIS_STR;
        return `{ content: '${displayContent}' }`;
    }
    toString() {
        if (!this.content)
            return EMPTY_CONTENT_STR;
        else if (this.content && !this.path)
            return this._contentToString();
        return `{ path: '${this.path}' }`;
    }
    static get URL_UNIQUE_PART_LENGTH() {
        return URL_UNIQUE_PART_LENGTH;
    }
}
exports.default = ClientScript;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jdXN0b20tY2xpZW50LXNjcmlwdHMvY2xpZW50LXNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBFQUEwRDtBQUMxRCwrQ0FBaUQ7QUFDakQsMkNBQWlEO0FBQ2pELCtCQUF3QztBQUN4Qyw2REFBMEU7QUFFMUUsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDO0FBQ3JDLE1BQU0sYUFBYSxHQUFLLEdBQUcsQ0FBQztBQUU1QixNQUFNLGlCQUFpQixHQUFRLHNCQUFzQixDQUFDO0FBQ3RELE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLE1BQU0sb0JBQW9CLEdBQUssS0FBSyxDQUFDO0FBRXJDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBRWpDLE1BQXFCLFlBQVk7SUFDN0IsWUFBYSxJQUFJLEVBQUUsUUFBUTtRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFPLElBQUksSUFBSSxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBUSxzQ0FBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLEdBQUksRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQU8sSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUssSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQU8sdUNBQWlCLENBQUMsR0FBRyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZLENBQUUsSUFBSTtRQUNkLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztRQUV4QixJQUFJLGlCQUFVLENBQUMsSUFBSSxDQUFDO1lBQ2hCLFlBQVksR0FBRyxJQUFJLENBQUM7YUFDbkI7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ2QsTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1lBRTlFLFlBQVksR0FBRyxXQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1QztRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFFLElBQUk7UUFDckIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QyxJQUFJO1lBQ0EsSUFBSSxDQUFDLElBQUksR0FBTSxZQUFZLENBQUM7WUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLGdDQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsR0FBRyxHQUFPLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxDQUFDLEVBQUU7WUFDTixNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLDhCQUE4QixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQy9FO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUUsSUFBSTtRQUN2QixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFeEIsSUFBSTtZQUNBLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxDQUFDLEVBQUU7WUFDTixNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLGdEQUFnRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN0RztRQUVELE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlFLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSTtRQUNOLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJO1lBQ2xCLE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMscUNBQXFDLENBQUMsQ0FBQzthQUM1RSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRO1lBQ2xDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbkM7WUFDRCxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFFL0YsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVU7Z0JBQzlFLE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMsNkNBQTZDLENBQUMsQ0FBQztZQUV6RixJQUFJLFFBQVE7Z0JBQ1IsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNsQyxJQUFJLFVBQVU7Z0JBQ2YsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztnQkFFdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUM7WUFFL0IsSUFBSSxRQUFRO2dCQUNSLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSx1Q0FBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRDtRQUVELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBRXhCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksc0JBQXNCLEdBQUcsb0JBQW9CLENBQUMsTUFBTTtZQUMzRSxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7WUFFOUIsY0FBYyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxzQkFBc0IsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztRQUU1SCxPQUFPLGVBQWUsY0FBYyxLQUFLLENBQUM7SUFDOUMsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDYixPQUFPLGlCQUFpQixDQUFDO2FBRXhCLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQy9CLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFbkMsT0FBTyxZQUFZLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQztJQUN0QyxDQUFDO0lBRUQsTUFBTSxLQUFLLHNCQUFzQjtRQUM3QixPQUFPLHNCQUFzQixDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQTVHRCwrQkE0R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkRmlsZSB9IGZyb20gJy4uL3V0aWxzL3Byb21pc2lmaWVkLWZ1bmN0aW9ucyc7XG5pbXBvcnQgeyBHZW5lcmFsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBSVU5USU1FX0VSUk9SUyB9IGZyb20gJy4uL2Vycm9ycy90eXBlcyc7XG5pbXBvcnQgeyBpc0Fic29sdXRlLCBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBSZXF1ZXN0RmlsdGVyUnVsZSwgZ2VuZXJhdGVVbmlxdWVJZCB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuXG5jb25zdCBCRUFVVElGWV9SRUdFWFAgPSAvWy8uOlxcc1xcXFxdL2c7XG5jb25zdCBCRUFVVElGWV9DSEFSICAgPSAnXyc7XG5cbmNvbnN0IEVNUFRZX0NPTlRFTlRfU1RSICAgICAgPSAneyBjb250ZW50OiA8ZW1wdHk+IH0nO1xuY29uc3QgQ09OVEVOVF9TVFJfTUFYX0xFTkdUSCA9IDMwO1xuY29uc3QgQ09OVEVOVF9FTExJUFNJU19TVFIgICA9ICcuLi4nO1xuXG5jb25zdCBVUkxfVU5JUVVFX1BBUlRfTEVOR1RIID0gNztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xpZW50U2NyaXB0IHtcbiAgICBjb25zdHJ1Y3RvciAoaW5pdCwgYmFzZVBhdGgpIHtcbiAgICAgICAgdGhpcy5pbml0ICAgICA9IGluaXQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy51cmwgICAgICA9IGdlbmVyYXRlVW5pcXVlSWQoVVJMX1VOSVFVRV9QQVJUX0xFTkdUSCk7XG4gICAgICAgIHRoaXMuY29udGVudCAgPSAnJztcbiAgICAgICAgdGhpcy5wYXRoICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMubW9kdWxlICAgPSBudWxsO1xuICAgICAgICB0aGlzLnBhZ2UgICAgID0gUmVxdWVzdEZpbHRlclJ1bGUuQU5ZO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgfVxuXG4gICAgX3Jlc29sdmVQYXRoIChwYXRoKSB7XG4gICAgICAgIGxldCByZXNvbHZlZFBhdGggPSBudWxsO1xuXG4gICAgICAgIGlmIChpc0Fic29sdXRlKHBhdGgpKVxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoID0gcGF0aDtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYmFzZVBhdGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5jbGllbnRTY3JpcHRCYXNlUGF0aElzTm90U3BlY2lmaWVkKTtcblxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoID0gam9pbih0aGlzLmJhc2VQYXRoLCBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG4gICAgfVxuXG4gICAgYXN5bmMgX2xvYWRGcm9tUGF0aCAocGF0aCkge1xuICAgICAgICBjb25zdCByZXNvbHZlZFBhdGggPSB0aGlzLl9yZXNvbHZlUGF0aChwYXRoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wYXRoICAgID0gcmVzb2x2ZWRQYXRoO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gYXdhaXQgcmVhZEZpbGUodGhpcy5wYXRoKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuY29udGVudC50b1N0cmluZygpO1xuICAgICAgICAgICAgdGhpcy51cmwgICAgID0gcGF0aCB8fCB0aGlzLnVybDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5jYW5ub3RMb2FkQ2xpZW50U2NyaXB0RnJvbVBhdGgsIHBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX2xvYWRGcm9tTW9kdWxlIChuYW1lKSB7XG4gICAgICAgIGxldCByZXNvbHZlZFBhdGggPSBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlZFBhdGggPSByZXF1aXJlLnJlc29sdmUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMuY2xpZW50U2NyaXB0TW9kdWxlRW50cnlQb2ludFBhdGhDYWxjdWxhdGlvbkVycm9yLCBlLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5fbG9hZEZyb21QYXRoKHJlc29sdmVkUGF0aCk7XG5cbiAgICAgICAgdGhpcy5tb2R1bGUgPSBuYW1lO1xuICAgIH1cblxuICAgIF9wcmVwYXJlVXJsICgpIHtcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5yZXBsYWNlKEJFQVVUSUZZX1JFR0VYUCwgQkVBVVRJRllfQ0hBUikudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdCA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMuY2xpZW50U2NyaXB0SW5pdGlhbGl6ZXJJc05vdFNwZWNpZmllZCk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLmluaXQgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fbG9hZEZyb21QYXRoKHRoaXMuaW5pdCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBwYXRoOiBpbml0UGF0aCwgY29udGVudDogaW5pdENvbnRlbnQsIG1vZHVsZTogaW5pdE1vZHVsZSwgcGFnZTogaW5pdFBhZ2UgfSA9IHRoaXMuaW5pdDtcblxuICAgICAgICAgICAgaWYgKGluaXRQYXRoICYmIGluaXRDb250ZW50IHx8IGluaXRQYXRoICYmIGluaXRNb2R1bGUgfHwgaW5pdENvbnRlbnQgJiYgaW5pdE1vZHVsZSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKFJVTlRJTUVfRVJST1JTLmNsaWVudFNjcmlwdEluaXRpYWxpemVyTXVsdGlwbGVDb250ZW50U291cmNlcyk7XG5cbiAgICAgICAgICAgIGlmIChpbml0UGF0aClcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9sb2FkRnJvbVBhdGgoaW5pdFBhdGgpO1xuICAgICAgICAgICAgZWxzZSBpZiAoaW5pdE1vZHVsZSlcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9sb2FkRnJvbU1vZHVsZShpbml0TW9kdWxlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBpbml0Q29udGVudDtcblxuICAgICAgICAgICAgaWYgKGluaXRQYWdlKVxuICAgICAgICAgICAgICAgIHRoaXMucGFnZSA9IG5ldyBSZXF1ZXN0RmlsdGVyUnVsZShpbml0UGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wcmVwYXJlVXJsKCk7XG4gICAgfVxuXG4gICAgX2NvbnRlbnRUb1N0cmluZyAoKSB7XG4gICAgICAgIGxldCBkaXNwbGF5Q29udGVudCA9ICcnO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnQubGVuZ3RoIDw9IENPTlRFTlRfU1RSX01BWF9MRU5HVEggLSBDT05URU5UX0VMTElQU0lTX1NUUi5sZW5ndGgpXG4gICAgICAgICAgICBkaXNwbGF5Q29udGVudCA9IHRoaXMuY29udGVudDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGlzcGxheUNvbnRlbnQgPSB0aGlzLmNvbnRlbnQuc3Vic3RyaW5nKDAsIENPTlRFTlRfU1RSX01BWF9MRU5HVEggLSBDT05URU5UX0VMTElQU0lTX1NUUi5sZW5ndGgpICsgQ09OVEVOVF9FTExJUFNJU19TVFI7XG5cbiAgICAgICAgcmV0dXJuIGB7IGNvbnRlbnQ6ICcke2Rpc3BsYXlDb250ZW50fScgfWA7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudClcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9DT05URU5UX1NUUjtcblxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRlbnQgJiYgIXRoaXMucGF0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50VG9TdHJpbmcoKTtcblxuICAgICAgICByZXR1cm4gYHsgcGF0aDogJyR7dGhpcy5wYXRofScgfWA7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBVUkxfVU5JUVVFX1BBUlRfTEVOR1RIICgpIHtcbiAgICAgICAgcmV0dXJuIFVSTF9VTklRVUVfUEFSVF9MRU5HVEg7XG4gICAgfVxufVxuIl19