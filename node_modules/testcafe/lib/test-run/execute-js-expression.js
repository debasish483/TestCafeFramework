"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vm_1 = require("vm");
const module_1 = __importDefault(require("module"));
const path_1 = require("path");
const nanoid_1 = __importDefault(require("nanoid"));
const test_run_1 = require("../errors/test-run");
const exportable_lib_1 = __importDefault(require("../api/exportable-lib"));
const ERROR_LINE_COLUMN_REGEXP = /:(\d+):(\d+)/;
const ERROR_LINE_OFFSET = -1;
const ERROR_COLUMN_OFFSET = -4;
const contexts = {};
// NOTE: do not beautify this code since offsets for error lines and columns are coded here
function wrapInAsync(expression) {
    return '(async function() {\n' +
        expression + ';\n' +
        '});';
}
function getErrorLineColumn(err) {
    const result = err.stack.match(ERROR_LINE_COLUMN_REGEXP);
    const line = parseInt(result[1], 10);
    const column = parseInt(result[2], 10);
    return { line, column };
}
function formatExpression(expression) {
    const expresionMessage = expression.split('\n');
    return '[JS code]\n' + expresionMessage.map(str => {
        return ' '.repeat(10) + str;
    }).join('\n');
}
function createRequire(filename) {
    if (module_1.default.createRequireFromPath)
        return module_1.default.createRequireFromPath(filename);
    const dummyModule = new module_1.default(filename, module);
    dummyModule.filename = filename;
    dummyModule.paths = [filename].concat(module.paths);
    return id => dummyModule.require(id);
}
function createSelectorDefinition(testRun) {
    return (fn, options = {}) => {
        const { skipVisibilityCheck, collectionMode } = contexts[testRun.contextId].options;
        if (skipVisibilityCheck)
            options.visibilityCheck = false;
        if (testRun && testRun.id)
            options.boundTestRun = testRun;
        if (collectionMode)
            options.collectionMode = collectionMode;
        return exportable_lib_1.default.Selector(fn, options);
    };
}
function createClientFunctionDefinition(testRun) {
    return (fn, options = {}) => {
        if (testRun && testRun.id)
            options.boundTestRun = testRun;
        return exportable_lib_1.default.ClientFunction(fn, options);
    };
}
function getExecutingContext(testRun, options = {}) {
    const contextId = testRun.contextId || nanoid_1.default(7);
    if (!contexts[contextId])
        contexts[contextId] = createExecutingContext(testRun);
    contexts[contextId].options = options;
    testRun.contextId = contextId;
    return contexts[contextId];
}
function createExecutingContext(testRun) {
    const filename = testRun.test.testFile.filename;
    const replacers = {
        require: createRequire(filename),
        __filename: filename,
        __dirname: path_1.dirname(filename),
        t: testRun.controller,
        Selector: createSelectorDefinition(testRun),
        ClientFunction: createClientFunctionDefinition(testRun),
        Role: exportable_lib_1.default.Role,
        RequestLogger: exportable_lib_1.default.RequestLogger,
        RequestMock: exportable_lib_1.default.RequestMock,
        RequestHook: exportable_lib_1.default.RequestHook
    };
    return vm_1.createContext(new Proxy(replacers, {
        get: (target, property) => {
            if (replacers.hasOwnProperty(property))
                return replacers[property];
            if (global.hasOwnProperty(property))
                return global[property];
            throw new Error(`${property} is not defined`);
        }
    }));
}
function createErrorFormattingOptions(expression) {
    return {
        filename: formatExpression(expression),
        lineOffset: ERROR_LINE_OFFSET,
        columnOffset: ERROR_COLUMN_OFFSET
    };
}
function executeJsExpression(expression, testRun, options) {
    const context = getExecutingContext(testRun, options);
    const errorOptions = createErrorFormattingOptions(expression);
    return vm_1.runInContext(expression, context, errorOptions);
}
exports.executeJsExpression = executeJsExpression;
async function executeAsyncJsExpression(expression, testRun, callsite) {
    const context = getExecutingContext(testRun);
    const errorOptions = createErrorFormattingOptions(expression);
    try {
        return await vm_1.runInContext(wrapInAsync(expression), context, errorOptions)();
    }
    catch (err) {
        if (err.isTestCafeError)
            throw err;
        const { line, column } = getErrorLineColumn(err);
        throw new test_run_1.ExecuteAsyncExpressionError(err, expression, line, column, callsite);
    }
}
exports.executeAsyncJsExpression = executeAsyncJsExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS1qcy1leHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3QtcnVuL2V4ZWN1dGUtanMtZXhwcmVzc2lvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJCQUFpRDtBQUNqRCxvREFBNEI7QUFDNUIsK0JBQStCO0FBQy9CLG9EQUE0QjtBQUM1QixpREFBaUU7QUFDakUsMkVBQWtEO0FBRWxELE1BQU0sd0JBQXdCLEdBQUcsY0FBYyxDQUFDO0FBQ2hELE1BQU0saUJBQWlCLEdBQVUsQ0FBQyxDQUFDLENBQUM7QUFDcEMsTUFBTSxtQkFBbUIsR0FBUSxDQUFDLENBQUMsQ0FBQztBQUVwQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFFcEIsMkZBQTJGO0FBQzNGLFNBQVMsV0FBVyxDQUFFLFVBQVU7SUFDNUIsT0FBTyx1QkFBdUI7UUFDdkIsVUFBVSxHQUFHLEtBQUs7UUFDbEIsS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFFLEdBQUc7SUFDNUIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUV6RCxNQUFNLElBQUksR0FBSyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUM1QixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBRSxVQUFVO0lBQ2pDLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVoRCxPQUFPLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVB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QU0sT0FBTyxHQUFRLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xELE1BQU0sWUFBWSxHQUFHLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTlELElBQUk7UUFDQSxPQUFPLE1BQU0saUJBQVksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUM7S0FDL0U7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLElBQUksR0FBRyxDQUFDLGVBQWU7WUFDbkIsTUFBTSxHQUFHLENBQUM7UUFFZCxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpELE1BQU0sSUFBSSxzQ0FBMkIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDbEY7QUFDTCxDQUFDO0FBZkQsNERBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBydW5JbkNvbnRleHQsIGNyZWF0ZUNvbnRleHQgfSBmcm9tICd2bSc7XG5pbXBvcnQgTW9kdWxlIGZyb20gJ21vZHVsZSc7XG5pbXBvcnQgeyBkaXJuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgbmFub2lkIGZyb20gJ25hbm9pZCc7XG5pbXBvcnQgeyBFeGVjdXRlQXN5bmNFeHByZXNzaW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IGV4cG9ydGFibGVMaWIgZnJvbSAnLi4vYXBpL2V4cG9ydGFibGUtbGliJztcblxuY29uc3QgRVJST1JfTElORV9DT0xVTU5fUkVHRVhQID0gLzooXFxkKyk6KFxcZCspLztcbmNvbnN0IEVSUk9SX0xJTkVfT0ZGU0VUICAgICAgICA9IC0xO1xuY29uc3QgRVJST1JfQ09MVU1OX09GRlNFVCAgICAgID0gLTQ7XG5cbmNvbnN0IGNvbnRleHRzID0ge307XG5cbi8vIE5PVEU6IGRvIG5vdCBiZWF1dGlmeSB0aGlzIGNvZGUgc2luY2Ugb2Zmc2V0cyBmb3IgZXJyb3IgbGluZXMgYW5kIGNvbHVtbnMgYXJlIGNvZGVkIGhlcmVcbmZ1bmN0aW9uIHdyYXBJbkFzeW5jIChleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuICcoYXN5bmMgZnVuY3Rpb24oKSB7XFxuJyArXG4gICAgICAgICAgIGV4cHJlc3Npb24gKyAnO1xcbicgK1xuICAgICAgICAgICAnfSk7Jztcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JMaW5lQ29sdW1uIChlcnIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBlcnIuc3RhY2subWF0Y2goRVJST1JfTElORV9DT0xVTU5fUkVHRVhQKTtcblxuICAgIGNvbnN0IGxpbmUgICA9IHBhcnNlSW50KHJlc3VsdFsxXSwgMTApO1xuICAgIGNvbnN0IGNvbHVtbiA9IHBhcnNlSW50KHJlc3VsdFsyXSwgMTApO1xuXG4gICAgcmV0dXJuIHsgbGluZSwgY29sdW1uIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEV4cHJlc3Npb24gKGV4cHJlc3Npb24pIHtcbiAgICBjb25zdCBleHByZXNpb25NZXNzYWdlID0gZXhwcmVzc2lvbi5zcGxpdCgnXFxuJyk7XG5cbiAgICByZXR1cm4gJ1tKUyBjb2RlXVxcbicgKyBleHByZXNpb25NZXNzYWdlLm1hcChzdHIgPT4ge1xuICAgICAgICByZXR1cm4gJyAnLnJlcGVhdCgxMCkgKyBzdHI7XG4gICAgfSkuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUgKGZpbGVuYW1lKSB7XG4gICAgaWYgKE1vZHVsZS5jcmVhdGVSZXF1aXJlRnJvbVBhdGgpXG4gICAgICAgIHJldHVybiBNb2R1bGUuY3JlYXRlUmVxdWlyZUZyb21QYXRoKGZpbGVuYW1lKTtcblxuICAgIGNvbnN0IGR1bW15TW9kdWxlID0gbmV3IE1vZHVsZShmaWxlbmFtZSwgbW9kdWxlKTtcblxuICAgIGR1bW15TW9kdWxlLmZpbGVuYW1lID0gZmlsZW5hbWU7XG4gICAgZHVtbXlNb2R1bGUucGF0aHMgICAgPSBbZmlsZW5hbWVdLmNvbmNhdChtb2R1bGUucGF0aHMpO1xuXG4gICAgcmV0dXJuIGlkID0+IGR1bW15TW9kdWxlLnJlcXVpcmUoaWQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvckRlZmluaXRpb24gKHRlc3RSdW4pIHtcbiAgICByZXR1cm4gKGZuLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgeyBza2lwVmlzaWJpbGl0eUNoZWNrLCBjb2xsZWN0aW9uTW9kZSB9ID0gY29udGV4dHNbdGVzdFJ1bi5jb250ZXh0SWRdLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKHNraXBWaXNpYmlsaXR5Q2hlY2spXG4gICAgICAgICAgICBvcHRpb25zLnZpc2liaWxpdHlDaGVjayA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0ZXN0UnVuICYmIHRlc3RSdW4uaWQpXG4gICAgICAgICAgICBvcHRpb25zLmJvdW5kVGVzdFJ1biA9IHRlc3RSdW47XG5cbiAgICAgICAgaWYgKGNvbGxlY3Rpb25Nb2RlKVxuICAgICAgICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uTW9kZSA9IGNvbGxlY3Rpb25Nb2RlO1xuXG4gICAgICAgIHJldHVybiBleHBvcnRhYmxlTGliLlNlbGVjdG9yKGZuLCBvcHRpb25zKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRGdW5jdGlvbkRlZmluaXRpb24gKHRlc3RSdW4pIHtcbiAgICByZXR1cm4gKGZuLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgaWYgKHRlc3RSdW4gJiYgdGVzdFJ1bi5pZClcbiAgICAgICAgICAgIG9wdGlvbnMuYm91bmRUZXN0UnVuID0gdGVzdFJ1bjtcblxuICAgICAgICByZXR1cm4gZXhwb3J0YWJsZUxpYi5DbGllbnRGdW5jdGlvbihmbiwgb3B0aW9ucyk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhlY3V0aW5nQ29udGV4dCAodGVzdFJ1biwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY29udGV4dElkID0gdGVzdFJ1bi5jb250ZXh0SWQgfHwgbmFub2lkKDcpO1xuXG4gICAgaWYgKCFjb250ZXh0c1tjb250ZXh0SWRdKVxuICAgICAgICBjb250ZXh0c1tjb250ZXh0SWRdID0gY3JlYXRlRXhlY3V0aW5nQ29udGV4dCh0ZXN0UnVuKTtcblxuICAgIGNvbnRleHRzW2NvbnRleHRJZF0ub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGVzdFJ1bi5jb250ZXh0SWQgICAgICAgICAgID0gY29udGV4dElkO1xuXG4gICAgcmV0dXJuIGNvbnRleHRzW2NvbnRleHRJZF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV4ZWN1dGluZ0NvbnRleHQgKHRlc3RSdW4pIHtcbiAgICBjb25zdCBmaWxlbmFtZSA9IHRlc3RSdW4udGVzdC50ZXN0RmlsZS5maWxlbmFtZTtcblxuICAgIGNvbnN0IHJlcGxhY2VycyA9IHtcbiAgICAgICAgcmVxdWlyZTogICAgICAgIGNyZWF0ZVJlcXVpcmUoZmlsZW5hbWUpLFxuICAgICAgICBfX2ZpbGVuYW1lOiAgICAgZmlsZW5hbWUsXG4gICAgICAgIF9fZGlybmFtZTogICAgICBkaXJuYW1lKGZpbGVuYW1lKSxcbiAgICAgICAgdDogICAgICAgICAgICAgIHRlc3RSdW4uY29udHJvbGxlcixcbiAgICAgICAgU2VsZWN0b3I6ICAgICAgIGNyZWF0ZVNlbGVjdG9yRGVmaW5pdGlvbih0ZXN0UnVuKSxcbiAgICAgICAgQ2xpZW50RnVuY3Rpb246IGNyZWF0ZUNsaWVudEZ1bmN0aW9uRGVmaW5pdGlvbih0ZXN0UnVuKSxcbiAgICAgICAgUm9sZTogICAgICAgICAgIGV4cG9ydGFibGVMaWIuUm9sZSxcbiAgICAgICAgUmVxdWVzdExvZ2dlcjogIGV4cG9ydGFibGVMaWIuUmVxdWVzdExvZ2dlcixcbiAgICAgICAgUmVxdWVzdE1vY2s6ICAgIGV4cG9ydGFibGVMaWIuUmVxdWVzdE1vY2ssXG4gICAgICAgIFJlcXVlc3RIb29rOiAgICBleHBvcnRhYmxlTGliLlJlcXVlc3RIb29rXG4gICAgfTtcblxuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KG5ldyBQcm94eShyZXBsYWNlcnMsIHtcbiAgICAgICAgZ2V0OiAodGFyZ2V0LCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcGxhY2Vycy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2Vyc1twcm9wZXJ0eV07XG5cbiAgICAgICAgICAgIGlmIChnbG9iYWwuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxbcHJvcGVydHldO1xuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvcGVydHl9IGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgICAgIH1cbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yRm9ybWF0dGluZ09wdGlvbnMgKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogICAgIGZvcm1hdEV4cHJlc3Npb24oZXhwcmVzc2lvbiksXG4gICAgICAgIGxpbmVPZmZzZXQ6ICAgRVJST1JfTElORV9PRkZTRVQsXG4gICAgICAgIGNvbHVtbk9mZnNldDogRVJST1JfQ09MVU1OX09GRlNFVFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlSnNFeHByZXNzaW9uIChleHByZXNzaW9uLCB0ZXN0UnVuLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29udGV4dCAgICAgID0gZ2V0RXhlY3V0aW5nQ29udGV4dCh0ZXN0UnVuLCBvcHRpb25zKTtcbiAgICBjb25zdCBlcnJvck9wdGlvbnMgPSBjcmVhdGVFcnJvckZvcm1hdHRpbmdPcHRpb25zKGV4cHJlc3Npb24pO1xuXG4gICAgcmV0dXJuIHJ1bkluQ29udGV4dChleHByZXNzaW9uLCBjb250ZXh0LCBlcnJvck9wdGlvbnMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUFzeW5jSnNFeHByZXNzaW9uIChleHByZXNzaW9uLCB0ZXN0UnVuLCBjYWxsc2l0ZSkge1xuICAgIGNvbnN0IGNvbnRleHQgICAgICA9IGdldEV4ZWN1dGluZ0NvbnRleHQodGVzdFJ1bik7XG4gICAgY29uc3QgZXJyb3JPcHRpb25zID0gY3JlYXRlRXJyb3JGb3JtYXR0aW5nT3B0aW9ucyhleHByZXNzaW9uKTtcblxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBydW5JbkNvbnRleHQod3JhcEluQXN5bmMoZXhwcmVzc2lvbiksIGNvbnRleHQsIGVycm9yT3B0aW9ucykoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyLmlzVGVzdENhZmVFcnJvcilcbiAgICAgICAgICAgIHRocm93IGVycjtcblxuICAgICAgICBjb25zdCB7IGxpbmUsIGNvbHVtbiB9ID0gZ2V0RXJyb3JMaW5lQ29sdW1uKGVycik7XG5cbiAgICAgICAgdGhyb3cgbmV3IEV4ZWN1dGVBc3luY0V4cHJlc3Npb25FcnJvcihlcnIsIGV4cHJlc3Npb24sIGxpbmUsIGNvbHVtbiwgY2FsbHNpdGUpO1xuICAgIH1cbn1cblxuXG4iXX0=